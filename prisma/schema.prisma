// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id              Int     @id @default(autoincrement())
  name String?
  address String @unique
  avatarPath String?
  collections Collections[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collections {
  id          Int @id @default(autoincrement())
  name        String
  symbol      String
  uri         String
  imageUrl    String?
  description String?
  totalSupply Int?
  address     String @unique

  user User @relation(fields: [userId], references: [id])
  userId      Int
  nft NFT[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Activity    Activity[]
}

model Listing {
  id        Int @id @default(autoincrement())
  name      String
  tokenId   Int
  collectionAddress String
  price     Float?
  imageUrl  String?
  wallet    String
  status    ListingStatus @default(ACTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Activity Activity[]
}

model NFT {
  id        Int @id @default(autoincrement())
  tokenId   Int
  collection Collections @relation(fields: [collectionId], references: [id])
  collectionId Int
  supply    Int?
  price     Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Activity  Activity[]
}

model NFTOwners {
  id        Int @id @default(autoincrement())
  ownerAddress String
  nftId     Int
  ownerStatus Boolean

  updatedAt DateTime @updatedAt
}

model Transaction {
  id Int @id @default(autoincrement())
  collectionId Int
  nftI Int
  txHash String

  createdAt DateTime @default(now())
}


model Activity {
  id            Int       @id @default(autoincrement())
  action        ActivityAction
  userAddress   String
  listingId     Int?
  nftId         Int?
  collectionId  Int?
  price         Float?
  description   String

  createdAt     DateTime  @default(now())

  listing       Listing?     @relation(fields: [listingId], references: [id])
  nft           NFT?         @relation(fields: [nftId], references: [id])
  collection    Collections? @relation(fields: [collectionId], references: [id])
}

enum ActivityAction {
  SELL
  BUY
  LISTING
  CANCEL_LISTING
}

enum ListingStatus {
  ACTIVE
  SOLD
  CANCELED
}
